/*
	1. 기본형
	· 기본형은 소문자로 시작하는 타입이다.

	1) 정수 타입

	① bit : 전구 1개 (8bit = 전구 8개)
	· 0 0 0 0 0 0 0 0 
	· 전구가 8개 있을 때 만들 수 있는 모든 신호는 2^8
	· 전구 8개로 256가지의 신호를 만들 수 있음.

	② byte (1byte, 8bit)
	· 2^8개의 값을 표현할 수 있음
	· 표현 가능한 정수 범위는 -128 ~ +127
	· +는 0부터 세기 때문에 +는 128개
	0000 0000 : 0
	0000 0001 : 1
	0000 0010 : 2
	0000 0011 : 3
	...
	0111 1111 : 127
	1000 0000 : -128 (첫 번째 비트가 1이면 음수를 나타낸다)
	1000 0010 : -126
	...
	1111 1111 : -1
	0000 0000 : 0 
  	(원래는 1 0000 0000인데, 8자리이기 때문에 1은 사라짐)

	③ short (2byte, 16bit)
	· 2^16개(65536개)의 값을 표현할 수 있음
	· 표현 가능한 정수 범위는 -(2^15) ~ +(2^15-1)
	· 반은 음수, 반은 양수이기 때문에 최소값이 -(2^15)가 됨
	· 반은 음수, 반은 양수이기 때문에 최대값이 +(2^15-1)가 됨
	· 양수는 0부터 시작이기 때문에 -1
	0000 0000 0000 0000 : 0
	...
	0111 1111 1111 1111 : 32767
	1000 0000 0000 0000 : -32768
	...
	1111 1111 1111 1111 : -1

	④ char (2byte, 16bit, 양수만)
	· 2^16개(65536개)의 값을 표현할 수 있음
	· 표현 가능한 정수 범위는 0 ~ 65535 (2^16-1)

	⑤ int (4byte)
	· 2^32개(약 43억개)의 값을 표현할 수 있다. 
		(0 하나가 늘어날 때마다 x 2 가 되기 때문에)
	· 표현 가능한 정수 범위는 -32768(2^31) ~ +32767(2^31-1)
	0000 0000 0000 0000 0000 0000 0000 0000 

	⑥ long (8byte, 64bit)
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000


	2) 실수 타입
	① float (4byte)
	② double (8byte)

	3) 참/거짓 타입
	· boolean(불리안) 


	2. 참조형
	· 참조형은 대문자로 시작하는 타입이다.

	1) String
	· 문자열을 표현할 수 있는 타입

	2) 그 외
	· 그 외 모든 클래스들	boolean d = a > b;
*/

public class A04_VarTypes {
	public static void main(String[] args) {

		int age = 10;

		byte _byte = 127;
		char _char = 65535;
		short _short = 32767;
		int _int = 2_100_000_000;
		// _(언더바)를 이용해서 3자리씩 끊을 수도 있음
		//int _int = 2200000000; // 안됨

		// int의 범위를 벗어나는 정수 리터럴은 뒤에 L 또는 l(소문자)을 붙여야 한다.
		long _long = 210000000000L;
		_long = 222222222222l;

		// 소수 리터럴은 기본적으로 double 타입이기 때문에
		// float 타입 리터럴은 뒤에 F 또는 f를 붙여 표시해야 한다.
		float _float = 123.123456F;
		double _double = 123.123456;

		// boolean 타입 변수에는 boolean타입 리터럴인 true/false만 저장할 수 있다.		
		boolean rich = true;
		boolean programmer = true;
		boolean wearable = false;		

		System.out.println("_byte에 들어있는 값 : " + _byte);

		String message = "Hello, world!";
		System.out.println(message);


/*
	# 정수 타입에 문자 저장하기
	· 다른 정수타입에도 문자를 저장할 수 있지만 문자 리터럴은 char 타입에 저장하는 것이 가장 올바르다.
*/
		
		int ch1 = 'T';
		byte ch2 = '!';
		short ch3 = '#';
		// 문자 하나를 저장하기에 적합
		char ch4 = '가', ch5 = '\t';
		// char ch5 = "김"; 큰따옴표는 문자 여러개가 들어갈 수 있기 때문에 사용X
		char ch6, ch7, ch8;


		System.out.println(ch1);
		System.out.println(ch2);

		// 같은 값이 들어있더라도 char타입은 기본적으로 문자로 활용하고
		// 그 외의 정수타입은 숫자로 활용한다.
		char c1 = 65;
		int c2 = 65;
		System.out.println("c1: " + c1 + ", c2: " + c2);
	}
}
